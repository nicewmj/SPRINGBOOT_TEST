分类
大致分为三类：自定义注解、JDK内置注解、还有第三方框架提供的注解。
● 自定义注解就是我们自己写的注解，比如@UserLog
● JDK内置注解，比如@Override检验方法重写，@Deprecated标识方法过期等
● 第三方框架定义的注解比如SpringMVC的@Controller等

作用
如果说注释是写给人看的，那么注解就是写给程序看的。它更像一个标签，贴在一个类、一个方法或者字段上。它的目的是为当前读取该注解的程序提供判断依据及少量附加信息。比如程序只要读到加了@Test的方法，就知道该方法是待测试方法，又比如@Before注解，程序看到这个注解，就知道该方法要放在@Test方法之前执行。有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如@RequestMapping("/user/info")提供了Controller某个接口的URL路径。


要牢记，只要用到注解，必然有三角关系：
● 定义注解
● 使用注解
● 读取注解

仅仅完成前两步，是没什么卵用的。就好比你写了一本武林秘籍却没人去学，那么这门武功还不如一把菜刀。
所以，接下来需要我们编写一个程序读取注解。读取注解的思路是：